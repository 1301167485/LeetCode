1.题目描述:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/

  给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

  不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。



  示例 1:

  给定数组 nums = [1,1,2], 

  函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

  你不需要考虑数组中超出新长度后面的元素。
  示例 2:

  给定 nums = [0,0,1,1,1,2,2,3,3,4],

  函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

  你不需要考虑数组中超出新长度后面的元素。


  说明:

  为什么返回数值是整数，但输出的答案是数组呢?

  请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

  你可以想象内部操作如下:

  // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
  int len = removeDuplicates(nums);

  // 在函数里修改输入数组对于调用者是可见的。
  // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
  for (int i = 0; i < len; i++) {
      print(nums[i]);
  }

2.思路:双指针https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/solution/shuang-zhi-zhen-shan-chu-zhong-fu-xiang-dai-you-hu/
  1）初始化：慢指针i在前。快指针j在后；（初始为i = 0；j = 1）
  2）如果慢指针i与快指针j的值相等，则快指针 j 向后移动一位；
  3）如果慢指针i与快指针的值相等，则令 nums[i + 1 ] = nums[j]，即把快指针的值给慢指针的下一位；
  3）知道快指针j遍历完数组，返回慢指针i+1的长度。
 
3.代码：
class Solution {
    public int removeDuplicates(int[] nums) {
        int i = 0;
        int j = 1;
        while(j < nums.length){
            if(nums[i] != nums[j]){
                nums[i+1] = nums[j];
                i++;
            }
            j++;
        }  
        return i+1; 
    }
}


4. 优化:如果数组元素全不相同，比如1、2、3、4、5，那么每一个元素都要原地复制；可以加上判断，如果 j - i > 1就复制。
代码如下：
  class Solution {
    public int removeDuplicates(int[] nums) {
        int i = 0;
        int j = 1;
        while(j < nums.length){
            if(nums[i] != nums[j] && j -i >= 1){
                nums[i+1] = nums[j];
                i++;
            }
            j++;
        }  
        return i+1; 
    }
}








