1.题目描述：https://leetcode-cn.com/problems/gas-station/
  在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。

  你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。

  如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。

  说明: 

  如果题目有解，该答案即为唯一答案。
  输入数组均为非空数组，且长度相同。
  输入数组中的元素均为非负数。
  示例 1:

  输入: 
  gas  = [1,2,3,4,5]
  cost = [3,4,5,1,2]

  输出: 3

  解释:
  从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
  开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
  开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
  开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
  开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
  开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
  因此，3 可为起始索引。
  示例 2:

  输入: 
  gas  = [2,3,4]
  cost = [3,4,3]

  输出: -1

  解释:
  你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
  我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
  开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
  开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
  你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
  因此，无论怎样，你都不可能绕环路行驶一周。

2.思路:(独立解决的，还是挺开心的，这题不难)
  大体思路:
    1）看完题目首先要明确一点，就是当前油量sum + gas[i] - cost[i] 一定要大于等于 0；
    2）也就是说，我们从一个加油站出发，要保证经过的每一个加油站的 sum + gas[i] - cost[i] >= 0;
    3）如果不满足条件2），则说明从当前加油站出发不满足要求，应该换一个加油站出发；
  细节补充：
    1）第一个加油站如何选择，显然第一个加油站sum为0，那么 gas[i] - cost[i] 要大于等于0，所有从第一个加油站开始遍历，如果当前加油站gas[i] - cost[i] > 0，
       则将加油站 i 作为起点，开始进行上述思路2）中判断；
    2）如果从当前加油站 i 出发，在判断过程中发现sum < 0了，说明当前加油站 i 不满足题目要求；
    3）那么此时选择第 i + 1个加油站作为出发点，继续进行大体思路2）中的判断；
    4）那如何判断什么时候跳出循环呢？我们可以设置一个count，初始化为0，每经过一共加油站后如果sum >= 0，说明可以达到该加油站，那么count++，如果能够到达所有的加油站，
       那么count == length，此时满足要求，直接跳出循环即可
    
 3.代码：    public int canCompleteCircuit(int[] gas, int[] cost) {
        // 实际上只需要计算剩余油量tem  + gas[i] - cost[i]是否大于0，大于0说明当前油量+加油站的油大于消耗
        // 1.因为初始油量为0，所以第一个加油站一定满足gas[i] > cost[i]
        int sum = 0; // 表示当前油量
        int[] array = new int[gas.length];      // 利用array来记录gas[i] - cost[i]
        for(int i = 0; i < gas.length; i++){
            array[i] = gas[i] - cost[i];
        }
        int res = -1;
        for(int i = 0; i < array.length; i++){
            // 首先找到第一个加油站
            if(array[i] >= 0){
                int temp = i; // 记录i的位置
                int count = 0; // 记录一共经过多少个加油站
                while(sum >= 0 && count < array.length){
                    if(temp == array.length) temp = 0;
                    sum += array[temp++]; 
                    if(sum < 0) break;   // sum为0说明不能到达这个加油站，那么此时的出发点不满足题目要求，直接break
                    count ++;   
                    if(count == array.length) {return i;}  // 如果经过的加油站数count为总数量，说明满足题目要求
                }
                sum = 0;    // 每次while循环后要重置sum为0，然后把i+1当作出发点再进行判断
            }
        }
        return res;
    }
  
