1.题目描述：https://leetcode-cn.com/problems/climbing-stairs/
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶


2.思路：
  1）对于当前楼梯i，他只能由[i-1]和[i-2]层到达，
  2）dp[i]取决于dp[i-1]和dp[i-2]，即状态转移方程为dp[i] = dp[i-1] + dp[i-2}
  3）初始化dp[0] = 0,dp[1] = 1, dp[2] = 1
  4）dp[3] = dp[1] + dp[2] = 3, dp[4] = dp[2] + dp[3] = 1 + 3 = 4
  5）求解dp[n]即可
  
  
  
3.代码：
      public int climbStairs(int n) {
        int dp1 = 0,dp2 = 1,result = 1;
        for(int i = 1; i<=n; i++){
            result = dp1 + dp2;
            dp1 = dp2;
            dp2 = result;
        }
        return result;

    }
  
