1.题目描述：https://leetcode-cn.com/problems/palindromic-substrings/    基于第5题：最长回文串
  给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。

  具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。



  示例 1：

  输入："abc"
  输出：3
  解释：三个回文子串: "a", "b", "c"
  示例 2：

  输入："aaa"
  输出：6
  解释：6个回文子串: "a", "a", "a", "aa", "aa", "aaa"


  提示：

  输入的字符串长度不会超过 1000 。
  
2.思路1: 动态规划法
  1）这一题可以使用动态规划来进行解决：
  2）状态：dp[i][j] 表示字符串s在[i,j]区间的子串是否是一个回文串。
  3）状态转移方程：当 s[i] == s[j] && (j - i < 2 || dp[i + 1][j - 1]) 时，dp[i][j]=true，否则为false这个状态转移方程是什么意思呢？
    3.1）当只有一个字符时，比如 a 自然是一个回文串。
    3.2）当有两个字符时，如果是相等的，比如 aa，也是一个回文串。
    3.3）当有三个及以上字符时，比如 ababa 这个字符记作串 1，把两边的 a 去掉，也就是 bab 记作串 2，可以看出只要串2是一个回文串，那么左右各多了一个 a 的串 1 必定也是回文串。
         所以当 s[i]==s[j] 时，自然要看 dp[i+1][j-1] 是不是一个回文串。
3.代码比较：（惭愧...）       
    自己代码:
      public int countSubstrings(String s) {
        int len = s.length();
        if(len < 2) return 1;
        int max = 0;
        char[] chars = s.toCharArray();
        int[][] dp = new int[len][len];
        for(int j = 0; j < len; j++){
            for(int i = j; i >=0; i--){
                if(chars[i] == chars[j]){
                    if(j - i < 2){
                        dp[i][j] = 1;
                        max++;
                        System.out.println("i:" + i + " j:"+j);
                    }
                    else {
                        dp[i][j] = dp[i+1][j-1];
                        if(dp[i][j] == 1) {
                            max++;
                            System.out.println("i:" + i + " j:"+j);
                        }

                    }
                }
            }
        }
        return max; 
    }
    大佬代码：
      public int countSubstrings(String s) {
          // 动态规划法
          boolean[][] dp = new boolean[s.length()][s.length()];
          int ans = 0;

          for (int j = 0; j < s.length(); j++) {
              for (int i = 0; i <= j; i++) {
                  if (s.charAt(i) == s.charAt(j) && (j - i < 2 || dp[i + 1][j - 1])) {
                      dp[i][j] = true;
                      ans++;
                  }
              }
          }

          return ans;
      }
      
4.思路2：中心扩展法
  1）比如对一个字符串 ababa，选择最中间的 a 作为中心点，往两边扩散，第一次扩散发现 left 指向的是 b，right 指向的也是 b，所以是回文串，继续扩散，同理 ababa 也是回文串。
     这个是确定了一个中心点后的寻找的路径，然后我们只要寻找到所有的中心点，问题就解决了。
  2）中心点一共有多少个呢？看起来像是和字符串长度相等，但你会发现，如果是这样，上面的例子永远也搜不到 abab，想象一下单个字符的哪个中心点扩展可以得到这个子串？似乎不可能。
     所以中心点不能只有单个字符构成，还要包括两个字符，比如上面这个子串 abab，就可以有中心点 ba 扩展一次得到，所以最终的中心点由 2 * len - 1 个，分别是 len 个单字符和 len - 1 个双字符。
  3）如果上面看不太懂的话，还可以看看下面几个问题：
     为什么有 2 * len - 1 个中心点？
      aba 有5个中心点，分别是 a、b、c、ab、ba
      abba 有7个中心点，分别是 a、b、b、a、ab、bb、ba
  4）什么是中心点？
      中心点即 left 指针和 right 指针初始化指向的地方，可能是一个也可能是两个
  5）为什么不可能是三个或者更多？
      因为 3 个可以由 1 个扩展一次得到，4 个可以由两个扩展一次得到

5.代码：
  class Solution6472 {
    public int countSubstrings(String s) {
        // 中心扩展法
        int ans = 0;
        for (int center = 0; center < 2 * s.length() - 1; center++) {
        // 最巧妙的就是设置center范围和left与right的取值，实在是巧妙，需要细细品味
            // left和right指针和中心点的关系是？
            // 首先是left，有一个很明显的2倍关系的存在，其次是right，可能和left指向同一个（偶数时），也可能往后移动一个（奇数）
            // 大致的关系出来了，可以选择带两个特殊例子进去看看是否满足。
            int left = center / 2;
            int right = left + center % 2;

            while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
                ans++;
                left--;
                right++;
            }
        }
        return ans;
    }
}
