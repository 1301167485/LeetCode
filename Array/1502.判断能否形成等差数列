1.题目描述:https://leetcode-cn.com/problems/can-make-arithmetic-progression-from-sequence/
  给你一个数字数组 arr 。

  如果一个数列中，任意相邻两项的差总等于同一个常数，那么这个数列就称为 等差数列 。

  如果可以重新排列数组形成等差数列，请返回 true ；否则，返回 false 。



  示例 1：

  输入：arr = [3,5,1]
  输出：true
  解释：对数组重新排序得到 [1,3,5] 或者 [5,3,1] ，任意相邻两项的差分别为 2 或 -2 ，可以形成等差数列。
  示例 2：
  
  输入：arr = [1,2,4]
  输出：false
  解释：无法通过重新排序得到等差数列。
  
2. 思路1(第一次ace，比较繁琐不建议采纳)：
  1）获取最小值min和最大值max；
  2）获取等差数列的差值mean；
  3）对arr中的元素进行遍历，来确定该元素的相对位置，如果位置全部正确则返回true
    3.1）arr中的元素num，（num-min）/mean则是该元素可能出现的位置。
    3.2）如果该位置已经无元素，则标记为1，有元素则表明存在相同元素，返回false
    3.3）最后对所有标记位进行遍历，如果不全为1表示缺少正确位置的元素
 
 3.代码：
   public static boolean canMakeArithmeticProgression(int[] arr) {
        int max = Arrays.stream(arr).max().getAsInt();
        int min = Arrays.stream(arr).min().getAsInt();
        int len = arr.length;
        // 获取差值
        if ((max - min) % (len - 1) != 0) return false;
        int mean = (max - min) / (len - 1);
        int[] nums = new int[len];  // 标记数组
        // 利用set判断是否全为相同元素
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < len; i++) set.add(arr[i]);
        if (set.size() == 1) return true;
        // 为每个元素寻找合适的位置
        for (int i = 0; i < len; i++) {
            if ((arr[i] - min) % mean != 0) return false;
            else {
                if (nums[(arr[i] - min) / mean] == 1) return false;
                else nums[(arr[i] - min) / mean] = 1;
            }
        }
        for (int i = 0; i < len; i++) {
            if (nums[i] != 1) return false;
        }
        return true;
    }
}


4.优质答案：
    思路:
      1）对arr进行排序
      2）arr中的元素arr[i]【1 < i < len-1】满足 arr[i] = (arr[i-1] + arr[i+1])/2
    public boolean canMakeArithmeticProgression(int[] arr) {
        Arrays.sort(arr);
        for(int i = 1; i < (arr.length-1);i++){
            if(arr[i]*2 != arr[i-1]+arr[i+1]) return false;
        }
        return true;
    }
