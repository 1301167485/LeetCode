1.题目描述：https://leetcode-cn.com/problems/longest-increasing-subsequence/
  给定一个无序的整数数组，找到其中最长上升子序列的长度。

  示例:

  输入: [10,9,2,5,3,7,101,18]
  输出: 4 
  解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。


2.思路1：以i结尾的最大上升序列（时间复杂度为n*n）
  1）dp[i]表示以第i个元素结尾的最长上升序列
  2）对于数组[1,3,2,3,1,4]
  3）dp[0] = 1，只有这一个元素
  4）dp[1] = 2，nums[1] > nums[0]，所以dp1 = dp[0] +1
  5）dp[2] = 2, nums[2] > nums[0],nums[2] < nums[1}，所以dp[2] = dp[0] + 1
  6）dp[3] = 3, nums[3] > nums[0],nums[3] !> nums[1] ,nums[3] > nums[2]，所以dp[3] = max(dp[0],dp[2]) + 1
  7）dp[4] = 1, nums[4]小于前面的所以元素，dp[4] = 1;
  8）dp[5] = 4，nums[5] > nums[0], nums[5] > nums[1], nums[5] > nums[2], nums[5] > nums[3], nums[5] > nums[4],所以dp[5] = max(dp[0], dp[1], dp[2], dp[3], dp[4]) + 1
  9）综上所述，dp[i]取决于nums的大小和以及位置i之前的所有dp
  
3.代码：
  class Solution {
      public int lengthOfLIS(int[] nums) {
          int len = nums.length;
          if(len <= 1) return len;
          int[] dp = new int[len];
          int max = 1;
          for(int i = 0; i < len; i++){
              dp[i] = 1;
              for(int j = 0; j < i; j++){
                  if(nums[i] > nums[j]){
                      dp[i] = Math.max(dp[i],dp[j]+1);
                  }
              }
              max = Math.max(dp[i],max);
          }
          return max;
      }
}

4.思路2：利用栈来实
  1）设置一个栈（用数组来实现），将nums[0]来实现
  2）遍历nums数组
  3）若nums[i] > stack.peek()，则将元素i进栈
  4）若nums[i] < stack.peek()，则从遍历栈内元素，找到栈中第一个大于等于该元素的nums[j]，用nums[i]替换nums[j]
  5）最后返回栈的大小
  
5.代码： 执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户;内存消耗：36.6 MB, 在所有 Java 提交中击败了79.54%的用户
      public int lengthOfLIS(int[] nums) {
        int len = nums.length;
        if(len <= 1) return len;
        int[] stack = new int[len+1];
        int top = -1;
        stack[++top] = nums[0];
        for(int i = 1; i < len; i++){
            if(nums[i] > stack[top]) stack[++top] = nums[i];
            else if(nums[i] < stack[top]){
                for(int j = 0; j <= top; j++){
                    if(stack[j] >= nums[i]){
                        stack[j] = nums[i];
                        break;
                    }
                }
            }
        }
        return top+1;
    }
