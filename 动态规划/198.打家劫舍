1.题目描述：https://leetcode-cn.com/problems/house-robber/
  你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

  给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

  示例 1：

  输入：[1,2,3,1]
  输出：4
  解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
       偷窃到的最高金额 = 1 + 3 = 4 。
  示例 2：

  输入：[2,7,9,3,1]
  输出：12
  解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
       偷窃到的最高金额 = 2 + 9 + 1 = 12 。


  提示：

  0 <= nums.length <= 100
  0 <= nums[i] <= 400

2.思路:
  1) dp[1] = nums[1] (假设房间号从第一个开始)
  2) dp[2] = max( dp[1],nums[2])
  3) dp[3] = max( dp[1] + nums[3], dp[2])
  4) dp[4] = max( dp[2] + nums[4], dp[3])
  5) 由上可以看出，当前dp[i]即前i个房间偷盗的最大值，取决于i-1和i-2
  6）即dp[i] = max (dp[i-2] + nums[i],dp[i-1])
  
3.代码：
      public int rob(int[] nums) {
        int len = nums.length;
        if(len == 0) return 0;
        if(len == 1 ) return nums[0];
        if(len == 2) return Math.max(nums[0],nums[1]);
        int dp1 = nums[0];
        int dp2 = Math.max(nums[0],nums[1]);
        int result = 0;
        for(int i = 2; i < len;i++){
            result = Math.max(dp1 + nums[i],dp2);
            dp1 = dp2;
            dp2 = result;
        }
        return result;
    }
