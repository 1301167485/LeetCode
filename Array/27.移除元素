1.题目描述：https://leetcode-cn.com/problems/remove-element/
  给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

  不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

  元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。



  示例 1:

  给定 nums = [3,2,2,3], val = 3,

  函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。

  你不需要考虑数组中超出新长度后面的元素。
  示例 2:

  给定 nums = [0,1,2,2,3,0,4,2], val = 2,

  函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。

  注意这五个元素可为任意顺序。

  你不需要考虑数组中超出新长度后面的元素。

2.思路：双指针
  1）快指针i和慢指针j
  2）j指针指向当前nums[j]不等于val的元素
  3）如果i指针的元素nums[i] == val，则用j指针的替换，同时将j指针的值替换为val

3.代码：
  执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户
  内存消耗：36.9 MB, 在所有 Java 提交中击败了94.59%的用户
  
  public int removeElement(int[] nums, int val) {
        int i = 0;
        int j = 0;
        while(j < nums.length){
            // j找到不为val的元素
            while(j < nums.length && nums[j] == val) j++;
            // 找不到则返回当前i
            if(j == nums.length) return i;
            if(nums[i] == val){
                nums[i] = nums[j];
                nums[j] = val;
            }
            i++;
            j++;
        }
        return i;
    }
 
 4.高分代码1：（双指针）
    1）保留两个指针 ii 和 jj，其中 ii 是慢指针，jj 是快指针。
    2）当 nums[j]与给定的值相等时，递增 j 以跳过该元素。只要 nums[j] != val，我们就复制 nums[j] 到 nums[i] 并同时递增两个索引。
    3）重复这一过程，直到 j 到达数组的末尾，该数组的新长度为 i。
    public int removeElement(int[] nums, int val) {
    int i = 0;
    for (int j = 0; j < nums.length; j++) {
        if (nums[j] != val) {
            nums[i] = nums[j];
            i++;
        }
    }
    return i;
}

5.高分代码2：（双指针）如果当前元素值==val，则将其交换到最后，类似于快排
  public int removeElement(int[] nums,int val){
    int i = 0;
    int j = nums.length -1;
    while(i <= j){
      if(nums[i] == val){
        nums[i]] = nums[j];
        j--;
      }
      else i++;
    }
    return i;
  } 

  
    
    
    
    
