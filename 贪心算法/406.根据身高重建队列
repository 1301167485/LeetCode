1.题目描述
  假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。

  请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。



  示例 1：

  输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
  输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
  解释：
  编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
  编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
  编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
  编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
  编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
  编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
  因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
  示例 2：

  输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
  输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]


  提示：

  1 <= people.length <= 2000
  0 <= hi <= 106
  0 <= ki < people.length
  题目数据确保队列可以被重建
  通过次数74,569提交次数104,023
 
 
 2.思路:
    1）自己刚开始做的时候写了一堆破玩意嵌套循环，各种遍历、各种循环，实在写不下去
    2）看了一眼高赞答案，我他妈的脑子就不是个脑子
    3）具体流程直接看代码，一目了然。
  

3.代码:
      /**
     * 解题思路：先排序再插入
     * 1.排序规则：按照先H高度降序，K个数升序排序
     * 2.遍历排序后的数组，根据K插入到K的位置上
     *
     * 核心思想：高个子先站好位，矮个子插入到K位置上，前面肯定有K个高个子，矮个子再插到前面也满足K的要求
     *
     * @param people
     * @return
     */
    public int[][] reconstructQueue(int[][] people) {
        // [7,0], [7,1], [6,1], [5,0], [5,2], [4,4]
        // 再一个一个插入。
        // [7,0]
        // [7,0], [7,1]
        // [7,0], [6,1], [7,1]
        // [5,0], [7,0], [6,1], [7,1]
        // [5,0], [7,0], [5,2], [6,1], [7,1]
        // [5,0], [7,0], [5,2], [6,1], [4,4], [7,1]
        Arrays.sort(people, (o1, o2) -> o1[0] == o2[0] ? o1[1] - o2[1] : o2[0] - o1[0]);

        LinkedList<int[]> list = new LinkedList<>();
        for (int[] i : people) {
            list.add(i[1], i);
        }

        return list.toArray(new int[list.size()][2]);
    }


4.注意点:
  1）关于二维数组排序，如果只比较二维数组中一个元素，则利用Array.sort(array,(int[] o1,int[] o2){ return o1-o2;});
  2）如果先按二维数组中第一个元素排序，在第一个元素相等的情况下，按第二个元素排序，则代码如下：
        Arrays.sort(array,(int[] o1,int[] o2)->{
            if(o1[0] != o2[0])return o1[0] - o2[0];
            else return o1[1] - o2[1];
        });
        简化代码如下：Arrays.sort(array, (o1, o2) -> o1[0] == o2[0] ? o1[1] - o2[1] : o2[0] - o1[0]);  
  3)关于list转化为数组：
       List<int[]> list = new ArrayList<>();//假设list中已经存放了元素
       int[][] array = list.toArray(new int[list.size()][2]); // 2表示当前二维数组、或者说list中的的一个元素的列数为2，具体是多少要看情况
        
  
  
  
