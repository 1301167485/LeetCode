1.题目描述：https://leetcode-cn.com/problems/house-robber-ii/
  你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。

  给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。



  示例 1：

  输入：nums = [2,3,2]
  输出：3
  解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
  示例 2：

  输入：nums = [1,2,3,1]
  输出：4
  解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
       偷窃到的最高金额 = 1 + 3 = 4 。
  示例 3：

  输入：nums = [0]
  输出：0


  提示：

  1 <= nums.length <= 100
  0 <= nums[i] <= 1000
  
  
2.思路1（自己ace，思路有些繁琐，边界情况处理有点麻烦，不如思路2清晰简介）：动态规划
  1）dp[i]表示前i个房子的总金额
  2）当房间个数len <= 3时，即选择前三个中最大的房间，dp[0] = nums[0]，dp[1] = max(num[0],nums[1]),dp[2] = max(num[0],nums[1],nums[3])
  3）当房间个数len > 3时，因为第一个和最后一个房间不能兼容，所有我们每次求解dp[i]时，需要判断前i个选择中是否包含了第一个房间；这样直到我们计算最后一个房间时dp[n]时，先看当前
     是否包含了第一个房间，如果包含了则dp[len-1] = max(dp[len-1),dp[len-2])，如果不包含第一个房间，则可以选择最后一个房间，dp[i] = max(dp[i-1],dp[i-2]+nums[n])
   3.1）维护一个boolean数组flag来判断当前i的选择过程中是否选择了第一个房间,如果dp[i-1} < dp[i-2] + nums[i]，则flag[i] = flag[i-2]，否则flag[i] = flag[i-1]
   3.2）初始化： dp[0] = nums[0],dp[1] = max(dp[0],nums[1]),dp[2] = max(dp[1],dp[0]+nums[2]),循环直到数组倒数第二个房间（倒数第一个要特殊处理）
   3.3）初始化：flag[0] = true,若dp[1]取决于dp[0]，则flag[1] = flag[0] = true,以此类推。
   3.4）对于dp[n]（这里n = len-1）,即最后一个房间，
    3.4.1）如果dp[n-1] > dp[n-2] + nums[n]，说明不需要选择最后一个房间，所以此时是否选择了第一个房间无所谓；
    3.4.2）当dp[n-1] < dp[n-2] + nums[n]时，如果没有选择第一个房间的时候，此时可以选择最后一个房间即dp[n] = dp[n-2] + nums[n]；但如果选择了第一个房间，则dp[n] = max(dp[n-1],dp[n-2])
  4）以上思路还少了一种考虑，就是我已经选择了第一个房间，当要计算到dp[n]，发现当dp[n-1] < dp[n-2] + nums[n]，按照上面所述则dp[n] = max(dp[n-1],dp[n-2])，即不选择最后一个房间。
     但是，如果其他房间选择一样，我放弃第一个房间而选择最后一个房间，得到的结果发现比上述更优。
     所以，代码最后应该比较上述两种情况哪个更有。


  代码:
  public int rob(int[] nums) {
        int len = nums.length;
        int[] dp = new int[len];
        boolean[] flag = new boolean[len]; 
        int result1;
        // 考虑只有三个房间的情况
        if(len < 4){
            int max = 0;
            for(int i = 0; i < len ; i++) max = Math.max(max,nums[i]);
            return max;
        }
        // 初始化dp[0],dp[1],flag[0],flag[1]
        dp[0] = nums[0];
        flag[0] = true;
        if(nums[0] > nums[1]){
            dp[1] = nums[0];
            flag[1] = true;
        }
        else{
            dp[1] = nums[1];
            flag[1] = false;
        }
        // 计算前n-1个房间
        for(int i = 2; i < len - 1; i++){
            if(dp[i-2] + nums[i] > dp[i-1]){
                dp[i] = dp[i-2]+nums[i];
                flag[i] = flag[i-2]; 
            }
            else{
                dp[i] = dp[i-1];
                flag[i] = flag[i-1];
            }
        }
        // 特殊处理最后一个房间
        if(dp[len-3] + nums[len-1] > dp[len - 2]){
            if(flag[len-3] == true){
                result1 =  Math.max(dp[len-2],dp[len-3]);
            }
            else result1 = dp[len-3] + nums[len-1];
        }
        else result1 =  dp[len-2];
        // 不考虑第一个房间的情况
        dp[1] = nums[1];
        dp[2] = Math.max(nums[1],nums[2]);
        for(int i = 3; i < len; i++){
            dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]);
        }
        return Math.max(result1,dp[len-1]);
    }
    
  3.思路2（优质解答搬运，大佬思路太清晰了~~）：动态规划
    1）环状排列意味着第一个房子和最后一个房子中只能选择一个偷窃，因此可以把此环状排列房间问题约化为两个单排排列房间子问题：
    2）在不偷窃第一个房子的情况下（即 nums[1:]），最大金额是p1
    3）在不偷窃最后一个房子的情况下（即 nums[:n−1]），最大金额是p2 。
    4）综合偷窃最大金额： 为以上两种情况的较大值，即 max(p1,p2) 。
  class Solution {
      public int rob(int[] nums) {
          if(nums.length == 0) return 0;
          if(nums.length == 1) return nums[0];
          return Math.max(myRob(Arrays.copyOfRange(nums, 0, nums.length - 1)), 
                          myRob(Arrays.copyOfRange(nums, 1, nums.length)));
      }
      private int myRob(int[] nums) {
          int pre = 0, cur = 0, tmp;
          for(int num : nums) {
              tmp = cur;
              cur = Math.max(pre + num, cur);
              pre = tmp;
          }
          return cur;
      }
  }


