1.题目描述:https://leetcode-cn.com/problems/task-scheduler/
  给你一个用字符数组 tasks 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。

  然而，两个 相同种类 的任务之间必须有长度为整数 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。

  你需要计算完成所有任务所需要的 最短时间 。



  示例 1：

  输入：tasks = ["A","A","A","B","B","B"], n = 2
  输出：8
  解释：A -> B -> (待命) -> A -> B -> (待命) -> A -> B
       在本示例中，两个相同类型任务之间必须间隔长度为 n = 2 的冷却时间，而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。 
  示例 2：

  输入：tasks = ["A","A","A","B","B","B"], n = 0
  输出：6
  解释：在这种情况下，任何大小为 6 的排列都可以满足要求，因为 n = 0
  ["A","A","A","B","B","B"]
  ["A","B","A","B","A","B"]
  ["B","B","B","A","A","A"]
  ...
  诸如此类
  示例 3：

  输入：tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
  输出：16
  解释：一种可能的解决方案是：
       A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (待命) -> (待命) -> A -> (待命) -> (待命) -> A


  提示：

  1 <= task.length <= 104
  tasks[i] 是大写英文字母
  n 的取值范围为 [0, 100]
  
2.思路：确实做不出来555，看了答案大概看懂了，好多细节还是没看懂555，怀疑自我。直接贴答案地址了
https://leetcode-cn.com/problems/task-scheduler/solution/tong-zi-by-popopop/     --》非常清晰的思路，有图、简单易懂
https://leetcode-cn.com/problems/task-scheduler/solution/ren-wu-diao-du-qi-by-leetcode-solution-ur9w/    --》 官网题解，更加细节，逻辑更加通畅
  1）填桶的思想（hhhh姑且这么起名吧）
  2）先找到出现次数最多的那个任务，假设为A，出现次数为maxExec，将任务A设置为一列，每一行的个数为n+1，相当于A执行完后，再执行其他n个任务，第二行又到了任务A。
  3）如果maxExec出现的次数只有A，那么总时间数：（maxExec - 1）* （n + 1) + 1
  4）如果有多个任务的出现次数为maxExec，应该如何处理？
  5）显然，都应该跟A一样排成一列，比如A为第一列，经过n个时间后，从第一行的A执行到第二行的A；如果B的出现次数也为maxExec，那么让B为第二列，第一个B（位于第一行第二列）执行完后，
     经过了n个时间，执行第二个B（位于第二行第二列），一次类推如果有C的出现次数也为maxExec，就放在第三列......
  6）一共消耗的时间取决于maxExec，n的大小以及多少个任务的出现次数也为maxExec；
  7）这里的消耗总时间为（maxExec - 1）* （n + 1) + maxCount；这里的maxCount指的是出现次数为maxCount的任务数量，即如果只有A和B出现的次数maxnaxExec，那么maxCount = 2；
  8）对于除了A、B这种出现次数为maxExec的以外的任务，比如C、D、F的任务出现次数都小于maxExec，那么可以按照从下到上，从左到右的顺序进行排列，详细情况看官方答案。
  9）以上考虑的是maxCount小于等于n + 1的情况，接下考虑，如果maxCount大于n + 1呢
  10）实际上可以想象到，当maxCount大于n + 1时，说明次数最多的任务的数量已经超过了n，那么其他任务不论怎么排列，都会满足题目要求的时间间隔，那么总时间一定就是所有任务的数量，
     即task.length;
  11）综上所述：
    如果maxCount没有超出n + 1，那么总时间 = （maxExec - 1）* （n + 1) + maxCount > task.length;
    如果maxCount超出了n + 1，那么总时间 = task.length >（maxExec - 1）* （n + 1) + maxCount
    也就是说，不论在什么情况下，我们都只要task.length 和（maxExec - 1）* （n + 1) + maxCount 中较大的那个值。
    
  以上思路是根据上面两个题解总结出来的，还是看题解更加详细清楚一点。
  
3.代码：
      public int leastInterval(char[] tasks, int n) {
        int maxExce = 0;
        int[] array = new int[26];
        for(int i = 0; i < tasks.length; i++){
            int temp = tasks[i] - 'A';
            array[temp]++;
            maxExce = Math.max(maxExce,array[temp]);
        }
        int maxCount = 0;
        for(int i = 0; i < 26; i++){
            if(array[i] == maxExce) maxCount++;
        }
        return Math.max((maxExce-1)*(n+1)+maxCount,tasks.length);
    }








