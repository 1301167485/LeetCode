1.题目描述；https://leetcode-cn.com/problems/partition-labels/

  字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。

  示例：

  输入：S = "ababcbacadefegdehijhklij"
  输出：[9,7,8]
  解释：
  划分结果为 "ababcbaca", "defegde", "hijhklij"。
  每个字母最多出现在一个片段中。
  像 "ababcbacadefegde", "hijhklij" 的划分是错误的，因为划分的片段数较少。


  提示：

  S的长度在[1, 500]之间。
  S只包含小写字母 'a' 到 'z' 。
  
2.思路:(采用的官方解答，直接搬运思路....)
  1）由于同一个字母只能出现在同一个片段，显然同一个字母的第一次出现的下标位置和最后一次出现的下标位置必须出现在同一个片段。因此需要遍历字符串，得到每个字母最后一次出现的下标位置。
  2）在得到每个字母最后一次出现的下标位置之后，可以使用贪心算法和双指针的方法将字符串划分为尽可能多的片段，具体做法如下。
  3）从左到右遍历字符串，遍历的同时维护当前片段的开始下标 start 和结束下标 end，初始时 start=end=0。
  4）对于每个访问到的字母 c，得到当前字母的最后一次出现的下标位置 cend 
  5）则当前片段的结束下标一定不会小于 cend 
  6）因此令 max(end,endc)
  7）当访问到下标 end 时，当前片段访问结束，当前片段的下标范围是 [start,end]，长度为 1end−start+1，将当前片段的长度添加到返回值，然后令 start=end+1，继续寻找下一个片段。
  8）重复上述过程，直到遍历完字符串。

上述做法使用贪心的思想寻找每个片段可能的最小结束下标，因此可以保证每个片段的长度一定是符合要求的最短长度，如果取更短的片段，则一定会出现同一个字母出现在多个片段中的情况。由于每次取的片段都是符合要求的最短的片段，因此得到的片段数也是最多的。

由于每个片段访问结束的标志是访问到下标 end，因此对于每个片段，可以保证当前片段中的每个字母都一定在当前片段中，不可能出现在其他片段，可以保证同一个字母只会出现在同一个片段。

3.代码：
  class Solution {
    public List<Integer> partitionLabels(String S) {
        int[] last = new int[26];
        int length = S.length();
        for (int i = 0; i < length; i++) {
            last[S.charAt(i) - 'a'] = i;
        }
        List<Integer> list = new ArrayList<Integer>();
        int start = 0, end = 0;
        for (int i = 0; i < length; i++) {
            end = Math.max(end, last[S.charAt(i) - 'a']);
            if (i == end) {
                list.add(end - start + 1);
                start = end + 1;
            }
        }
        return list;
    }
}

4.代码2（时隔两个月碰到这道题，独立ace掉）
    public List<Integer> partitionLabels(String S) {
        Map<Character,Integer> map = new HashMap<>();
        char[] chars = S.toCharArray();
        for(int i = 0; i < chars.length; i++) map.put(chars[i],i);
        List<Integer> res = new ArrayList<>();
        int start = 0;
        int end = map.get(chars[0]);
        int max = end;
        for(int i = 0; i < chars.length; i++){
            max = Math.max(map.get(chars[i]),max);
            if(i == max){
                res.add(max-start+1);
                start = max + 1;
                
            }
        }
        return res;
    }

