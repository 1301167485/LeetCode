https://leetcode-cn.com/problems/maximum-number-of-eaten-apples/

1. 题目：
  有一棵特殊的苹果树，一连 n 天，每天都可以长出若干个苹果。在第 i 天，树上会长出 apples[i] 个苹果，这些苹果将会在 days[i] 天后（也就是说，第 i + days[i] 天时）腐烂，变得无法食用。也可能有那么几天，树上不会长出新的苹果，此时用 apples[i] == 0 且 days[i] == 0 表示。

  你打算每天 最多 吃一个苹果来保证营养均衡。注意，你可以在这 n 天之后继续吃苹果。

  给你两个长度为 n 的整数数组 days 和 apples ，返回你可以吃掉的苹果的最大数目。

  示例 1：

  输入：apples = [1,2,3,5,2], days = [3,2,1,4,2]
  输出：7
  解释：你可以吃掉 7 个苹果：
  - 第一天，你吃掉第一天长出来的苹果。
  - 第二天，你吃掉一个第二天长出来的苹果。
  - 第三天，你吃掉一个第二天长出来的苹果。过了这一天，第三天长出来的苹果就已经腐烂了。
  - 第四天到第七天，你吃的都是第四天长出来的苹果。
  示例 2：

  输入：apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]
  输出：5
  解释：你可以吃掉 5 个苹果：
  - 第一天到第三天，你吃的都是第一天长出来的苹果。
  - 第四天和第五天不吃苹果。
  - 第六天和第七天，你吃的都是第六天长出来的苹果。

  提示：
  apples.length == n
  days.length == n
  1 <= n <= 2 * 104
  0 <= apples[i], days[i] <= 2 * 104
  只有在 apples[i] = 0 时，days[i] = 0 才成立
 
2.打周赛碰见这题，卡住了一直没做出来，好家伙今天干了四个小时；刚开始干了半天，发现一直跑不通，原来是自己想错了；看了高分题解的优先队列，555发现大家都是用优先队列做的！

3. 思路：https://leetcode-cn.com/problems/maximum-number-of-eaten-apples/solution/java-you-xian-dui-lie-by-lippon-qcyo/
  1）构建一个类用于保存苹果，包括苹果的保质期和数量；
  2）利用一个优先队列保存苹果，排序依据就是保质期；
  3）模拟吃苹果过程，每天丢掉过期的，添加新的，如果队列中还有苹果，那就吃掉一个；
  4）遍历的过程中，如果还有苹果没有过期，那就继续遍历天数，把剩下的吃了。
  说实话第一次做题有种面向对象的感觉，打开了新世界；以前做题好像要么是在单纯模拟，要么是在找规律，类似DP；这题直接用类模拟，或者说面向对象。真的牛逼！

3. 代码：
class Node{
    public int day;
    public int val;
    public Node(int day,int value){
        this.day = day;
        this.val = value;
    }
}
class Solution {
    public int eatenApples(int[] apples, int[] days) {
        int res = 0,len = apples.length,max = 0;
        PriorityQueue<Node> queue = new PriorityQueue<>((o1,o2) -> o1.day - o2.day);
        for(int i = 0; i < len || i <= max; i++){   // i要小于max是因为可能数组遍历完了，但是还有多余的苹果能吃，max用来记录最大能到达的天数
            // 去掉过期的苹果
            while(!queue.isEmpty() && queue.peek().day == i) queue.poll();
            // 添加新苹果（i必须小于len，因为只有len以内需要添加）
            if(i < len && apples[i] != 0 ){
                Node apple = new Node(i+days[i],apples[i]);
                queue.offer(apple);
                max = Math.max(max,i+days[i]);
            }
            // 吃掉苹果
            if(!queue.isEmpty()){
                res++;
                Node cur = queue.poll();
                if(--cur.val != 0) queue.offer(cur);
            }
        }
        return res;
    }
}


  




