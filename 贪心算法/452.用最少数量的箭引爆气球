1.https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/
在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。

一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。

给你一个数组 points ，其中 points [i] = [xstart,xend] ，返回引爆所有气球所必须射出的最小弓箭数。

 
示例 1：

输入：points = [[10,16],[2,8],[1,6],[7,12]]
输出：2
解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球
示例 2：

输入：points = [[1,2],[3,4],[5,6],[7,8]]
输出：4
示例 3：

输入：points = [[1,2],[2,3],[3,4],[4,5]]
输出：2
示例 4：

输入：points = [[1,2]]
输出：1
示例 5：

输入：points = [[2,3],[2,3]]
输出：1
 
 
 
2.思路：题目废话那么多，其实思路很简单，看小象leetcode画图一目了然，先排序，在平面坐标中画不同的排序后的横线，看看重叠的
  大体思路：
    1）以气球的左边界大小进行排序
    2）初始化的子空间为第一个气球的开始位置到结束位置，即start = points[0][0]; end = points[0][1]
    3）从start遍历到end，看看谁在这个子区间内，对于子区间内的气球只需要一箭，即res++；
    4）当下一个气球i的开始位置points[i][0]已经不在上述子区间内了，表明第一支箭射不到气球i；此时需要更新子区间，start =  points[i][0]；end = points[i][1]，继续进行操作3）
    5）直到遍历结束。
    
3.代码：
      public int findMinArrowShots(int[][] points) {
        对数组进行排序
        Arrays.sort(points,(int[] o1,int[] o2)->{return o1[0]>o2[0]?1:-1;});
        // 初始化区间
        if(points.length == 0) return 0;
        int start = points[0][0];
        int end = points[0][1];
        int res = 1; // 弓箭手数量
        for(int i = 1;i < points.length; i++){
            // 当前气球的左边界大于end，则res++，更新start和end
            if(points[i][0] > end){
                res++;
                start = points[i][0];
                end = points[i][1];
            }else{
                 // 当前气球的左边界小于end，则判断右边界是否小于end
                // 右边界小于end，则更新end为当前的右边界，右边界大于end则右边界不变
                 if(points[i][1] < end) end = points[i][1];
            }
        }
        return res;
    }
    注意点：数组的排序中，利用lambda表达式实现了compare接口，其次compare接口中，排序规则return不是return o1[0] - o2[0]；而是return o1[0]>o2[0]?1:-1;}
            这是因为如果如果o1[0]特别小，马上超出了int的负数的表示范围，o2[0]又特别大，马上超出了int的正数表示范围，那么相减一定超出了int表示范围，所以返回-1和1是最好的选择。
                TMD的LeetCode中有个例子就是这样....
            
            
            
            
            
