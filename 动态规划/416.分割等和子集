1.https://leetcode-cn.com/problems/partition-equal-subset-sum/
给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。

注意:

每个数组中的元素不会超过 100
数组的大小不会超过 200
示例 1:

输入: [1, 5, 11, 5]

输出: true

解释: 数组可以分割成 [1, 5, 5] 和 [11].
 

示例 2:

输入: [1, 2, 3, 5]

输出: false

解释: 数组不能分割成两个元素和相等的子集.

2.总体思路：
  1）首先做一些简单判断：
    1.1）数组length < 2，则不可能拆分返回false
    1.2）数组所有元素和为sum，令target = sum/2，则问题可以转换为能否选取数组部分元素使其和为target
    1.3）如果sum为奇数，则表示不可拆分，返回false
    1.4）取数组中最大元素max，如果max > target，则表明其他元素和必定小于target，即找不到这些元素和为target，返回false
  2）动态规划大体思路：
    2.1）创建二维数组 dp，包含 n 行 target+1 列，其中dp[i][j] 表示从数组的 [0,i] 下标范围内选取若干个正整数（可以是 0 个），是否存在一种选取方案使得被选取的正整数的和等于 j。
         初始时，dp 中的全部元素都是false。
    2.2）数组共4个元素，target为6；则算法思路为，
         dp[0][0]:前1个元素的部分元素之和能否为0；dp[1][0]:前2个元素的部分元素之和能否为0；dp[2][0]:前3个元素的部分元素之和能否为0； dp[3][0]:前4个元素的部分元素之和能否为0
         dp[0][1]:前1个元素的部分元素之和能否为1；dp[1][1]:前2个元素的部分元素之和能否为1；dp[2][1]:前3个元素的部分元素之和能否为1；dp[3][1]:前4个元素的部分元素之和能否为1；
         dp[0][2]:前1个元素的部分元素之和能否为2；dp[1][1]:前2个元素的部分元素之和能否为2；dp[2][1]:前3个元素的部分元素之和能否为2；dp[3][1]:前4个元素的部分元素之和能否为2；
         ......
         dp[0][6]:前1个元素的部分元素之和能否为6；dp[1][1]:前2个元素的部分元素之和能否为6；dp[2][1]:前3个元素的部分元素之和能否为6；dp[3][1]:前4个元素的部分元素之和能否为6；
    2.3）可以得到如下结论：
          1.如果前i个元素中的部分元素之和为j，那么前i+1个元素中部分元素之和也可以等于j；即dp[i+1][j] = dp[i][j]
          
  3）初始化边界:
    3.1）当 j = 0 时，无论i取任何值，dp[i][0] 都为true；即如果不选取任何正整数，则被选取的正整数等于 0。因此对于所有 0 ≤ i < len，都有 dp[i][0]=true。
    3.2）dp[0][nums[0]] = true
  4）转移方程：对于 i>0i>0 且 j>0j>0 的情况，如何确定 dp[i][j] 的值？需要分别考虑以下两种情况
    4.1）如果 j >= nums[i] 时，则对于当前的数字 \textit{nums}[i]nums[i]，可以选取也可以不选取，两种情况只要有一个为 true，就有 dp[i][j]=true。
    4.2）如果 j < nums[i]，则在选取的数字的和等于 j 的情况下无法选取当前的数字 nums[i]，因此有 dp[i][j] = dp[i−1][j]
    总结：状态转移方程如下：
      如果不选取 nums[i]，则 dp[i][j] = dp[i−1][j]；
      如果选取 nums[i]，则 dp[i][j] = dp[i−1][j−nums[i]]
  5）最后返回dp[len-1][target]即可。
  
3.代码:
  public boolean canPartition(int[] nums) {
          int len = nums.length;
          // 长度小于2说明不可拆分
          if(len < 2) return false;
          int sum = 0;
          int max = 0;
          for(int i = 0; i < len; i++){
              if(nums[i] > max) max = nums[i];
              sum += nums[i];
          }
          // 数组和为奇数说明不可拆分
          if(sum%2 != 0) return false;
          // 如果数组中最大元素max大于target说明剩余元素一定比target小，返回false
          // 问题转化为在数组中选择一部分元素的和是 sum 的一半
          int target = sum/2;
          if(max > target) return false;
          boolean[][] dp = new boolean[len][target+1];
          // 初始化边界，dp[i][0] == true;  j = nums[0]&&i=0 的时候一定为true
          for(int i = 1; i < len; i++) dp[i][0] = true;
          dp[0][nums[0]] = true;
          for(int i = 1; i < len; i++){
              int num = nums[i];
              for(int j = 1; j <= target; j++){
                  if(j >= num) {
                      dp[i][j] = dp[i-1][j] || dp[i-1][j - num]; 
                  }
                  else dp[i][j] = dp[i-1][j];
              }
          }
          return dp[len-1][target];
      }
      
  4.代码优化:(留给下次复习)
          
    
    
    
    
    
