1.题目描述：https://leetcode-cn.com/problems/minimum-number-of-refueling-stops/
  汽车从起点出发驶向目的地，该目的地位于出发位置东面 target 英里处。

  沿途有加油站，每个 station[i] 代表一个加油站，它位于出发位置东面 station[i][0] 英里处，并且有 station[i][1] 升汽油。

  假设汽车油箱的容量是无限的，其中最初有 startFuel 升燃料。它每行驶 1 英里就会用掉 1 升汽油。

  当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中。

  为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回 -1 。

  注意：如果汽车到达加油站时剩余燃料为 0，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为 0，仍然认为它已经到达目的地。

  示例 1：

  输入：target = 1, startFuel = 1, stations = []
  输出：0
  解释：我们可以在不加油的情况下到达目的地。
  示例 2：

  输入：target = 100, startFuel = 1, stations = [[10,100]]
  输出：-1
  解释：我们无法抵达目的地，甚至无法到达第一个加油站。
  示例 3：

  输入：target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]
  输出：2
  解释：
  我们出发时有 10 升燃料。
  我们开车来到距起点 10 英里处的加油站，消耗 10 升燃料。将汽油从 0 升加到 60 升。
  然后，我们从 10 英里处的加油站开到 60 英里处的加油站（消耗 50 升燃料），
  并将汽油从 10 升加到 50 升。然后我们开车抵达目的地。
  我们沿途在1两个加油站停靠，所以返回 2 。

  提示：

  1 <= target, startFuel, stations[i][1] <= 10^9
  0 <= stations.length <= 500
  0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target
  
2.思路:这道题是真tmd的贪心
  大体思想：利用大顶堆存储加油站的加油量，堆顶存储的是经过的多个加油站中油量最多的
    1）每到达一个加油站，就把该加油站的油量加入大顶堆
    2）查看是否能到达下一个加油站，如果到不了，则就要在已经经过的加油站中选择油量最多的那个加油站，即大顶堆第一个；
       如果还是不够到达下一个，则继续找大顶堆第一个，直到能到达下一个加油站；如果所有的加油站都找完了还是到不了下一个加油站，说明到不了，返回-1
    3）要特殊处理最后一个加油站到重点的距离
  具体思路:
    1）对所有加油站进行遍历，确定每个加油站是否能到达并且不断的更新大顶堆
    2）获得下一个加油站的距离
    3）判断能否到达该加油站
      （1）能到达则直接到达，更新油量，并将该加油站的油量加入大顶堆
      （2）到达不了则循环换取大顶堆第一个元素，直到能达到下一个加油站
    4）特殊处理最后一个加油站到终点的距离。
    
 3.代码:
      public int minRefuelStops(int target, int startFuel, int[][] stations) {
        // 建立一个大顶堆，从来存储汽油站
        PriorityQueue<Integer> queue = new PriorityQueue<Integer>((o1,o2)->{return o2-o1;});
        int res = 0;
        for(int i = 0; i < stations.length; i++){
            int n; // 存储两个加油站之间的距离
            if(i == 0) n = stations[i][0];
            else n = stations[i][0] - stations[i-1][0];
            // 如果当前油量能够到达加油站i，则直接到达
            if(startFuel >= n){
                startFuel -= n; // 更新当前油量
                queue.add(stations[i][1]); // 将当前加油站加入大顶堆
                target -= n;
            }else{
                //如果当前油量不能到达加油站i，则在已经经过的加油站中加油，直到能够到达加油站i
                while(!queue.isEmpty() && startFuel < n){
                    int temp = queue.remove();
                    startFuel+=temp;
                    res++;
                }
                if(startFuel < n) return -1;
                else {
                    startFuel -= n;
                    target -= n;
                    queue.add(stations[i][1]);
                }
            }
        }
        // 处理最后一段距离
        while(target > startFuel && !queue.isEmpty()){
            startFuel += queue.remove();
            res++;
        }
        if(target > startFuel) return -1;
        return res;
    }
  
  
  
  
  
  
  
  

