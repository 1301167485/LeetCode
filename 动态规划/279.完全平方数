1.题目描述：https://leetcode-cn.com/problems/perfect-squares/

给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:

输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.
示例 2:

输入: n = 13
输出: 2
解释: 13 = 4 + 9.

2.思路1：动态规划（自己想出来的，还没看优质解答，到时候回顾再看吧）
  1）dp[i]表示当前数字 i 完全平方数的最小个数，如dp[1] = 1; dp[2] = 2; dp[3] = 3
  2）如果一共数时完全平方数，如 9 = 3 * 3，那么dp[9] = 1;
  3）如果一个数 i 不是完全平方数，
    3.1）那么就 i 可以由 i-1 而来，即在 i-1 的基础之上 + 1的平方，也就是dp[i] = dp[i-1] + dp[1]
    3.2）i也可以由i-2而来，即dp[i] = dp[i-2} + dp[2]
    3.3）依次类推，dp[i] = min {以上所有情况 ),即从1遍历到i-1
  4)最后输出 dp[n] 即可
  5）补充：
    5.1）初始化dp[0] = 0; dp[1] = 1; dp[2] = 2
    5.2）关于2）中的具体实现可以利用开方函数Math.sqrt(x)，得到根号x的int值，再把这个值平方看是否 == x

3.代码：关于for循环中的比较次数还有优化的余地，不需要全部比较，有时间再优化吧
  public int numSquares(int n) {
        if(n < 3) return n;
        int[] dp = new int[n+1];
        dp[0]  = 0;
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i <= n; i++){
            int temp = (int)Math.sqrt(i);
            if(temp * temp == i) dp[i] = 1;
            else{
                dp[i] = dp[i-1]+1;
                for(int j = i-1; j>0; j--){
                    dp[i] = Math.min(dp[i],dp[i-j]+dp[j]);
                }
            }
        } 
        return dp[n];
    }
