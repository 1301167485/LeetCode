1.题目描述：https://leetcode-cn.com/problems/word-break/
  给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。

  说明：

  拆分时可以重复使用字典中的单词。
  你可以假设字典中没有重复的单词。
  示例 1：

  输入: s = "leetcode", wordDict = ["leet", "code"]
  输出: true
  解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。
  示例 2：

  输入: s = "applepenapple", wordDict = ["apple", "pen"]
  输出: true
  解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
       注意你可以重复使用字典中的单词。
  示例 3：

  输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
  输出: false


2.思路：
  1）dp[i] 表示前i个元素是否能拆分
  2）举例：字符串长度为8，则dp[8] = dp[7] && check(7,8)即如果前7个元素能拆分，且wordDict包含最后一个元素，则dp[8] = true。
  3）对于上面的例子一直从dp[7]遍历dp[1]，如果其中有一个dp[i] && check(i,8)，则表明当前字符串可拆分

3.代码:
      public boolean wordBreak(String s, List<String> wordDict) {
        boolean[] dp = new boolean[s.length()+1];
        dp[0] = true;
        for(int i = 1; i <= s.length(); i++){
            for(int j = i-1; j >= 0; j--){
                if(dp[j] && wordDict.contains(s.substring(j,i))){
                    dp[i] = true;
                    break;
                }      
            }
        }
        return dp[s.length()];
    }
