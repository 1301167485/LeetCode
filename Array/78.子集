1.题目描述：https://leetcode-cn.com/problems/subsets/
  同 面试题08.04.幂集 一样
  给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。

  说明：解集不能包含重复的子集。

  示例:

  输入: nums = [1,2,3]
  输出:
  [
    [3],
    [1],
    [2],
    [1,2,3],
    [1,3],
    [2,3],
    [1,2],
    []
  ]

2. 思路：
  https://leetcode-cn.com/problems/power-set-lcci/solution/mian-shi-ti-0804-mi-ji-by-bvsxg7tlzy/
  
3.代码：
      public static List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<>());
        for (int num : nums) {
            int len = result.size();
            for (int i = 0; i < len; i++) {
                List<Integer> list = new ArrayList<>();
                list.addAll(result.get(i));
                list.add(num);
                result.add(list);
            }
        }
        return result;

    }
  
2020/12/22

思路2：递归
1.先说简单的，对于一个nums[1,2,3],希望返回一个集合{{1}，{1，2}，{1，2，3}}；
  1）对于以上需求，非递归代码如下：
  public List<List<Integer>> subsets(int nums[]){
      List<List<Integer>> res = new ArrayList<>();
      List<Integer> list = newArrayList<>();
      for(int i = 0; i < nums.length; i++){
        list.add(nuns[i]);
        res.add(list);
      }
  } 

  2）对于以上需求，递归代码如下：
  public List<List<Integer>> subsets(int nums[]){
      List<List<Integer>> res = new ArrayList<>();
      List<Integer> list = newArrayList<>();
      generate(0,nums,list,res);
  } 
  public void generate(int i,char[] nums,List<Integer> list,List<List<Integer>> res){
    if(i >= nums.length) return;
    list.add(nums[i]);
    res.add(list);
    generate(i+1,nums,list,res);
  }
2.回归正题，对于一个nums[1,2,3]，希望返回全部子集：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
  1）思路:
    对于每个元素，要么放进list、要么不放入list；
    如果放入该元素，递归的进行后续元素的选择；
    同样，不放入该元素，也递归的进行后续元素的选择。
  2）代码如下：
  public List<List<Integer>> subsets(int nums[]){
      List<List<Integer>> res = new ArrayList<>();
      List<Integer> list = newArrayList<>();
      generate(0,nums,list,res);
  } 
  public void generate(int i,char[] nums,List<Integer> list,List<List<Integer>> res){
      if(i >= nums.length){
          res.generate(new ArrayList<Integer>(list));
          return;
      } 
      list.add(nums[i]);
      generate(i+1,nums,res,list);
      list.remove(list.size()-1);
      generate(i+1,nums,res,list);
  }
  

思路3：位运算
（1）数组中的每一个数字都有选和不选两种状态，我们可以用0和1表示，0表示不选，1表示选择。如果数组的长度是n，那么子集的数量就是2^n。比如数组长度是3，就有8种可能，分别是
   如果nums = [1，2，3]
   
              [0，0，0]：表示都不选 ==> []

              [0，0，1]：表示只选第三个 == > [3]

              [0，1，0]：表示只选第二个 == > [2]

              [0，1，1]：表示选第二、三个 == > [2，3]

              [1，0，0]：表示只选第一个 == > [1]

              [1，0，1]：表示选第一、三个 == > [1，3]

              [1，1，0]：表示选第一、二个 == > [1，2]

              [1，1，1]：表示全选。 == > [1，2，3]
  
（2）
    符号 & ：&可以用作位运算符，当&两边的表达式不是Boolean类型的时候，&表示按位操作。
    符号 <<：左移运算符，num << 1,相当于num乘以2
    符号 >>：右移运算符，num >> 1,相当于num除以2
    首先获取循环总次数，即一共多少种组合：设数组nums长度为n，则一共2的n次方种组合（nums中每个元素都可选可不选）；
    外循环为0到2的n次方，索引记为i；内循环为0到n，索引记为j；
    对于外循环的每一个i，向右移动j位，即 i >> j；然后与数字1进行&运算，即（i >> j）& 1 ，通过((i >> j) & 1) == 1可以得到i的每个位置是否为1；
    
    注意:上述最后一行的意思，实际上是 对于每一个元素i（进行位运算相当于二进制），判断最后一位元素是否为1；然后裁掉最后一位，再判断最后一位元素是否为1。   
    i >> j 相当于裁剪最后j位；
    (i >> j) & 1 表示裁剪后的结果与数字1进行按位与运算；其中1可以理解位00000001，其他位都是0，最后一位是1；
    ((i >> j) & 1) == 1 表示当前位结果是不是1，如果是1，就把当前位置j的元素加入list中。


代码3：
public static List<List<Integer>> subsets(int[] nums) {
    //子集的长度是2的nums.length次方，这里通过移位计算
    int length = 1 << nums.length;
    List<List<Integer>> res = new ArrayList<>(length);
    //遍历从0到length中间的所有数字，根据数字中1的位置来找子集
    for (int i = 0; i < length; i++) {  // i = 8；
        List<Integer> list = new ArrayList<>();
        for (int j = 0; j < nums.length; j++) {   // j = 3；
            //如果数字i的某一个位置是1，就把数组中对
            //应的数字添加到集合
            if (((i >> j) & 1) == 1)
                list.add(nums[j]);
        }
        res.add(list);
    }
    return res;
}
