1.题目描述：https://leetcode-cn.com/problems/assign-cookies/submissions/
  假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。

  对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。

  示例 1:

  输入: g = [1,2,3], s = [1,1]
  输出: 1
  解释: 
  你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
  虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
  所以你应该输出1。
  示例 2:

  输入: g = [1,2], s = [1,2,3]
  输出: 2
  解释: 
  你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
  你拥有的饼干数量和尺寸都足以让所有孩子满足。
  所以你应该输出2.

2.思路:题目虽然是贪心，或者说是贪心思想，实现采用了双指针的做法.
  写代码前的思考：
    怎么样可以让被满足的孩子数量最大？显然，应该让其中一个孩子在众多能满足他的coke中，选择最小的那个coke；再让下一个孩子重复这个操作。
    OK，怎么样选择最小的coke？对coke数组排序即可。
    综上所述就是贪心的思想，下面来谈具体的实现。
  1）先对两个数组进行排序
  2）初始两个指针都指向了数组第一个元素
  3）如果当前孩子能被当前coke满足，则同时向后移动一位
  4）如果不满当前孩子，则coke向后移动一位
  5）直到coke数组和孩子数组其中一个遍历结束

3.代码:
      public int findContentChildren(int[] g, int[] s) {
        int lenChild = g.length;
        int lenCoke = s.length;
        Arrays.sort(g);
        Arrays.sort(s);
        int max = 0;
        int indexChild = 0; // 糖果的索引
        int indexCoke = 0; // 孩子的遍历索引
        // 如果孩子数量小于糖果数量，则遍历孩子数组
        for(;indexCoke < lenCoke && indexChild < lenChild; indexCoke++){
            // 当前孩子被满足
            if(g[indexChild] <= s[indexCoke]){
                // 最大数加一
                max++;
                // 轮到下一个孩子和下一个糖果
                indexChild++;
            }
                // 如果当前coke不满足当前孩子，则找下一个coke
        }
        return max;

    }
