1.题目描述:https://leetcode-cn.com/problems/coin-change/
  给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。

  你可以认为每种硬币的数量是无限的。

  示例 1：

  输入：coins = [1, 2, 5], amount = 11
  输出：3 
  解释：11 = 5 + 5 + 1
  示例 2：

  输入：coins = [2], amount = 3
  输出：-1
  示例 3：

  输入：coins = [1], amount = 0
  输出：0
  示例 4：

  输入：coins = [1], amount = 1
  输出：1
  示例 5：

  输入：coins = [1], amount = 2
  输出：2


  提示：

  1 <= coins.length <= 12
  1 <= coins[i] <= 231 - 1
  0 <= amount <= 104

2.思路1：动态规划（自下而上）
  举例：coins = [1,2,5,7,10]，amount = 14，dp[i]代表金额i 的最优解（即最小的钞票数量）
    1）在计算dp[i]时，dp[i-1],dp[i-2]....dp[1],dp[0]都是已知的
    2）而金额i可由：
        金额i-1与conis[0](1元)组合而成
        金额i-2与conis[0](1元)组合而成
        金额i-5与conis[0](1元)组合而成
        金额i-7与conis[0](1元)组合而成
        金额i-10与conis[0](1元)组合而成
    3）即状态i可有状态i-1,i-2,i-5,i-7,i-10五个状态所转移到，所有dp[i] = min(dp[i-1]),dp[i-2]),dp[i-5]),dp[i-7]),dp[i-10]) + 1
 
 3.代码
  方法1：
    public int coinChange(int[] coins, int amount) {
        int length = amount + 1;
        int[] dp = new int[length];
        for(int i = 0; i <= amount; i++) dp[i] = -1;   // 初始化全为-1
        dp[0] = 0;    // 初始化dp[0] 为0
        for(int i = 1; i <= amount; i++){   // dp[i]从1到amout
            for(int j = 0; j < coins.length; j++){    //  对于每一个dp[i]，遍历coins每个元素进行比对
                if((i - coins[j] >= 0) && (dp[i - coins[j]] != -1)){   // 1.当前金额 > coins中的金额；2. 不能利用之前找不到的金额
                    if((dp[i] == -1) || (dp[i] > dp[i-coins[j]]+1)){   //  依次访问coins中的元素，找到最小的dp[i]
                        dp[i] = dp[i - coins[j]] + 1;
                    }
                }
            }
        }
        return dp[amount];
    }
    
  方法2（官方解答）：
    public int coinChange(int[] coins, int amount) {
        int max = amount + 1;
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, max);  // 将max填充到dp所有元素
        dp[0] = 0;   // 初始化dp[0]
        for (int i = 1; i <= amount; i++) {     // dp[i]从1到amout  
            for (int j = 0; j < coins.length; j++) {    //  对于每一个dp[i]，遍历coins每个元素进行比对
                if (coins[j] <= i) {        //  当前金额 > coins中的金额
                    dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);   // 依次访问coins中的元素，找到最小的dp[i]
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }

  
  

  
  
