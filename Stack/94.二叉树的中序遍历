1.题目：给定一个二叉树，返回它的中序遍历。

示例:

输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]


2.思路：（利用中序遍历的二次访问原则）
  1）利用stack的中序遍历，先压right，再压中，再压left
  2）每次都从栈中pop，第一次pop一个元素就是按步骤1进行压栈
  2）如果当前pop的元素已经pop过一次（即第二次pop），就可以访问该元素
  
3.代码:
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
       Stack<TreeNode> stack = new Stack<>();
        Set<TreeNode> set = new HashSet<>();
        List<Integer> list = new ArrayList<>();
        if (root != null) {
            stack.push(root);
            while (!stack.isEmpty()) {
                TreeNode node = stack.pop();
                if (set.contains(node))
                    list.add(node.val);
                else {
                    set.add(node);
                    if (node.right != null) stack.push(node.right);
                    stack.push(node);
                    if (node.left != null) stack.push(node.left);
                }
            }
        }
        return list;
    }
}
