1.题目描述:https://leetcode-cn.com/problems/reverse-nodes-in-k-group/
给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。

k 是一个正整数，它的值小于或等于链表的长度。

如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

示例：

给你这个链表：1->2->3->4->5

当 k = 2 时，应当返回: 2->1->4->3->5

当 k = 3 时，应当返回: 3->2->1->4->5

2.思路:每次遍历k个结点，对该组结点进行头插，然后遍历下一组结点（这道题按正常思路模拟即可。没什么特别的思路，就是细节特别多）  
  细节：
  1）每次遍历一组结点时要先记录该组第一个和第二个结点；
  2）记录第一个结点是因为这个结点最后要指向下一组的第一个或者最后一个结点（下一组有k个就指向最后一个，没有k给就指向第一个）
  3）记录第二个结点是每次头插法时要从第二个结点开始

3.代码（自己独立ace没看答案真的爽）：
      public ListNode reverseKGroup(ListNode head, int k) {
        // 如果k为1或者head为空，则直接返回
        if(head == null || k == 1) return head;
    
        ListNode s = head;  // 用来记录每组第一个结点
        ListNode newHead = null;   // 用来记录新的链表的头结点
        boolean flag = true;  // 用来判断是否是第一组，如果是第一组，则令newHead指向头结点并最终返回newHead
        while(true){
            ListNode p = s.next;  // 保存好s.next，即每组第二个元素，从第二个元素开始头插法
            ListNode tempHead = s;  // 记录头结点，即每组第一个元素
            // 找到下一组最后1个结点；如果没有下一组个数小于k，则找到下一组第一个；如果这一组小于k，则找到这组最后一个，下一组有k个就指向最后一个，没有k给就指向第一个
            int i = 1;
            ListNode temp = s;
            ListNode tempNext = null; //用来保存每组第一个元素指向的结点，
            while(temp!= null && i <= 2*k){
                 // 在当前组内遍历时.默认为null
                 // 当遍历到下一组时，先使s指向该组第一个
                if(i == k+1) tempNext = temp;
                // 如果该组够k个元素，则指向最后一个
                if(i == 2*k) tempNext = temp;
                temp = temp.next;
                i++;
            }
            if(i <= 2*k){ // 说明下一组不够k个
                // 对当前组进行头插
                ListNode tempNode = null;    
                i = 1;
                while(p != null && i <= k-1){
                    tempNode = p.next;
                    p.next = s;
                    s = p;   // s每次指向了头插后的头结点
                    p = tempNode;
                    i++;
                }
                tempHead.next = tempNode;   //tempHead本来为s即每组第一个，现在s变成头插后每组第一个
                //所以tempHead为当前组最后一个元素，应该指向下一组最后一个元素

                // 判断是否为第一组
                if(flag){  
                    newHead = s;
                    flag = false;
                }
                break;
            }
            else{
                  // 记录头插法中的临时变量
                  ListNode tempNode = null;
                  // 对每一组第二个元素开始头插
                  i = 1;
                  while(p != null && i <= k-1){
                      tempNode = p.next;
                      p.next = s;
                      s = p;   // s指向了头结点
                      p = tempNode;
                      i++;
                  }

                  if(flag){
                      newHead = s;
                      flag = false;
                  }
                  tempHead.next = tempNext;  //tempHead本来为s即每组第一个，现在s变成头插后每组第一个
                  //所以tempHead为当前组最后一个元素，应该指向下一组最后一个元素

                  // 让s指向下一个组的第一个结点（注意：非tempHead，一定是下一组第一个元素）
                  s = tempNode;  //
                  // 如果p为空则说明所有结点遍历结束
                  if(p == null) break;
                }
            }
        
        return newHead;
    }
