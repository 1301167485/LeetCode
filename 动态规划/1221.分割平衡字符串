1.题目描述：https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/
  在一个「平衡字符串」中，'L' 和 'R' 字符的数量是相同的。

  给出一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。

  返回可以通过分割得到的平衡字符串的最大数量。



  示例 1：

  输入：s = "RLRRLLRLRL"
  输出：4
  解释：s 可以分割为 "RL", "RRLL", "RL", "RL", 每个子字符串中都包含相同数量的 'L' 和 'R'。
  示例 2：

  输入：s = "RLLLLRRRLR"
  输出：3
  解释：s 可以分割为 "RL", "LLLRRR", "LR", 每个子字符串中都包含相同数量的 'L' 和 'R'。
  示例 3：

  输入：s = "LLLLRRRR"
  输出：1
  解释：s 只能保持原样 "LLLLRRRR".


  提示：

  1 <= s.length <= 1000
  s[i] = 'L' 或 'R'
  分割得到的每个字符串都必须是平衡字符串。

2. 思路1（利用栈）：执行用时：2 ms, 在所有 Java 提交中击败了13.55%的用户；内存消耗：36.4 MB, 在所有 Java 提交中击败了76.44%的用户
  1）遍历string中每一个元素
  2）空栈则进栈
  3）栈不为空，当前元素于栈顶元素是否一致
  4）一致则继续push，不一致则pop
  5）结束判断栈是否为空，为空则res++

3.代码：public int balancedStringSplit(String s) {
          Stack<Character> stack = new Stack<>();
          int res = 0;
          int len = s.length();
          for(int i= 0; i < len; i++ ){
              char c = s.charAt(i);
              if(stack.isEmpty()){
                  stack.push(c);
              }
              else{
                  if(c == stack.peek()) stack.push(c);
                  else{ 
                      stack.pop();
                      if(stack.isEmpty()) res++;
                  }
              }
          }
          return res;
    }
4.思路二：模拟简化题目要求
  1）定义int变量sum；
  2）遍历string
  3）遇到L就sum++，遇到R就sum--
  4）每次遍历完判断是否为0，为0则res++
  
5.代码:100.00%   94.0%
 public int balancedStringSplit(String s) {
      int sum = 0;
      int res = 0;
      for(int i = 0; i < s.length(); i++){
          if('L' == s.charAt(i)) sum++;
          else sum--;
          if(sum == 0) res++;
      }
      return res;
    }
