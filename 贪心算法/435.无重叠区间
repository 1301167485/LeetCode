1.题目描述:https://leetcode-cn.com/problems/non-overlapping-intervals/
  给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。

  注意:

  可以认为区间的终点总是大于它的起点。
  区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。
  示例 1:

  输入: [ [1,2], [2,3], [3,4], [1,3] ]

  输出: 1

  解释: 移除 [1,3] 后，剩下的区间没有重叠。
  示例 2:

  输入: [ [1,2], [1,2], [1,2] ]

  输出: 2

  解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。
  示例 3:

  输入: [ [1,2], [2,3] ]

  输出: 0

  解释: 你不需要移除任何区间，因为它们已经是无重叠的了。


2.思路:https://leetcode-cn.com/problems/non-overlapping-intervals/solution/wu-zhong-die-qu-jian-by-leetcode/  参考官方题解的方法四，
  大体思路:
    1）首先对区间进行排序，start小的在前，如果start相等，则end小的在前：Arrays.sort(intervals, (o1, o2) -> o1[0] == o2[0] ? o1[1] - o2[1] : o1[0] - o2[0]); 
    2）对区间逐个遍历比较，怎么比较呢？只需要考虑前一个区间和当前区间，并不需要考虑前面所有的区间合并情况，因为我们排序过了。（参考上述题解的方法4中的图例，一目了然）
       （1）如果当前区间start大于等于前一个区间end，表明没有重叠，直接将当前区间接在前一个区间后面即可
       （2）如果当前区间start小于前一个区间end，表明有重叠：那么取end较小的一个留下，在代码中体现如下： pre = temp[1] < pre[1] ? temp : pre; res++;
    注意：上述比较其实有三种情况，
        1）当前区间start大于等于前一个区间end，表明无重叠
        2）当前区间start小于前一个区间end，表明有重叠：
          （1）当前区间end小于前一个区间end，即当前区间在前一个区间范围内，那么保留当前区间；
          （2）当前区间end大于前一个区间end，即当前区间end比前一个区间大，保留前一个区间；
       本质上2）中的两个情况都是保留end中较小的，所以在上述思路在，将这两种归结为一种情况，即重叠时取end较小的。
 
3.代码：
      public int eraseOverlapIntervals(int[][] intervals) {
        // 对数组start排序，如果start相等，则end小的在前
        Arrays.sort(intervals, (o1, o2) -> o1[0] == o2[0] ? o1[1] - o2[1] : o1[0] - o2[0]); 
        // 遍历数组，一共三种情况
        // 1.没有重叠，新的区间直接跟在前一个区间pre之后
        // 2.起点相同，因为排序是按照如果start相等，则end小的在前，直接去掉新的区间就行，移除数++
        // 3.起点不同，有重叠，则去掉end较大的那个
        // 其中第2、3种情况可以一起考虑。
        int res = 0;
        if(intervals.length == 0) return res;
        int start = intervals[0][0];
        int end = intervals[0][1];
        int[] pre = intervals[0];
        for(int i = 1; i < intervals.length; i++ ){
            int[] temp = intervals[i];
            if(temp[0] >= pre[1]) pre = temp; // temp起点大于pre终点，说明没有间隔
            else {
                pre = temp[1] < pre[1] ? temp : pre; 
                res++;
            }
        }
        return res;
    }
       
       
       
       
   
       
       
