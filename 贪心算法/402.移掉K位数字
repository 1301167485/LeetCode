1.题目描述：https://leetcode-cn.com/problems/remove-k-digits/
  给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。

  注意:

  num 的长度小于 10002 且 ≥ k。
  num 不会包含任何前导零。
  示例 1 :

  输入: num = "1432219", k = 3
  输出: "1219"
  解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。
  示例 2 :

  输入: num = "10200", k = 1
  输出: "200"
  解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。
  示例 3 :

  输入: num = "10", k = 2
  输出: "0"
  解释: 从原数字移除所有的数字，剩余为空就是0。


2.思路：利用最小栈
  大体思路：
    1）设立一个栈stack
    2）遍历num中的元素，如果当前元素num[i]大于栈顶元素就push，
    3）如果小于栈顶元素就pop，每次pop后令看= k -1，表示已经移掉了一个数字
    3）继续判断num[i]是否小于新的栈顶元素，直到大于栈顶元素将其push或者栈为空将其push
  边界条件：
    1）上述当前元素进行判断是否push或者pop时，条件应该是!stack.isEmpty() && k > 0 && nums[i] < stack.peek();
    2）如果每一个字符都相等，比如“222222”，push完成后，stack中结果就是”2222222"，我们应当只保留stack前中前num.length - k 个元素
    3）对于stack的结果是“00123”，我们应当返回“123”，所以需要对结果字符串进行处理，去掉先导0
    
 3.代码：
   public String removeKdigits(String num, int k) {
        Stack<Integer> stack = new Stack<>();
        int tempK = k;  // 记录k的值，后面要用
        int len = num.length();
        // 遍历num中的每个元素
        for(int i = 0; i < len; i++){
            int temp = num.charAt(i) - '0';
            // 如果当前栈为空，就直接压栈
            if(stack.isEmpty()){
                stack.push(temp);
            }
            / 当前栈不为空
            else{
                //栈不为空，k大于0，当前元素大于栈顶元素，就循环的pop，直到栈顶元素小于当前元素或者k为0或者栈为空
                while(!stack.isEmpty() && k > 0 && stack.peek() > temp){
                    stack.pop();
                    k--;
                }
               // 找到合适位置，push进栈
                stack.push(temp);
            }
        }
        // 如果栈中元素过多，则移除掉多余的元素，只保留num.length - k 个元素
        while(stack.size() > len-tempK){
            stack.pop();
        }
        // 拼接结果字符串
        String res = "";
        while(!stack.isEmpty()){
            res = stack.pop() + res;
        }
        // 去掉开头的所有0，利用temp来指向第一个不为0的元素位置
        int temp = -1;
        for(int i = 0 ; i < res.length(); i++){
            if('0' != res.charAt(i)) {
                temp = i;
                break;
            }
        }
        // 全为0，则返回“0”
        if(temp == -1) return "0";
        
        // 如果
        return res = res.length() > 0 ? res.substring(temp,res.length()) : "0";
    }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
