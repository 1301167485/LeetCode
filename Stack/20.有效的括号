
1.第一次自己解答

    class Solution {
        public boolean isValid(String s) {
            Stack<Character> stack = new Stack<Character>();
            for(char c : s.toCharArray()){
                if(c == '(')
                    stack.push(')');
                else if(c == '{')
                    stack.push('}');
                else if(c == '[')
                    stack.push(']');
                else if(stack.isEmpty()|| c != stack.pop())return false;
            }
            return stack.isEmpty();
        }
    }

2.查习第1次：阅读官方解答后自己case。
  思路: 
     1）遇到左括号就入栈
     2）遇到右括号，弹出栈首判断是否匹配，不匹配返回false，匹配了继续判断下一个char
     3）最后判断栈是否为空，不为空范围false
  代码:
    class Solution {
        public boolean isValid(String s) {
                    int n = s.length();
            if (s.length() % 2 == 1) return false;
            Map<Character, Character> pairs = new HashMap<Character, Character>() {
                {
                    put(')', '(');
                    put(']', '[');
                    put('}', '{');
                }
            };
            Stack<Character> stack = new Stack<>();
            for (int i = 0;i < n; i++){
                char c = s.charAt(i);
                if(pairs.containsKey(c) && !stack.isEmpty()){
                    if (pairs.get(c) != stack.pop()) return false;
                }
                else stack.push(c);
            }
            return stack.isEmpty();

        }
    }
