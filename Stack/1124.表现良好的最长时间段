
1.暴力求解

    代码：
        public static int longestWPI(int[] hours){
                int max = 0;
                int[] array = new int[hours.length];
                for (int i = 0; i < hours.length; i++) {
                    array[i] = hours[i] > 8 ? 1:-1;
                }
                for (int i = 0; i < array.length; i++) {  
                    int sum = 0;
                    for(int j = i;j < array.length; j++){
                        sum += array[j];
                        if(sum>0)
                            max = (j-i+1)>max?(j-i+1):max;
                    }
                }
                return max;
            }

2. 第一次复习：哈希表记录前缀索引法（lc精彩题解第一位）(560/1248/1371都用到hash+前缀的方法，可以回头刷)

    思路：
        1）暴力求解会存在重复遍历；
        2）大于8为1，否则为-1
        3）从0开始遍历，每遍历到一个，要记录当前总和sum，将sun记录起来。
        4）如果sum 大于0，就令max = sun
        4）如果sum小于0，并且sum已经被记录过，则什么都不做（例如sum[i] = sum[j]并且i<j，如果后续能出现sum大于0即我们要求的时间段记为x，那么[i，x]的距离一定大于[j，x]）
        5）存在另外一种情况，当前sum<0，在我们已经遍历的元素（索引从0到i），存在一个索引x在[0,i]之间，使得sum[i] - sum[x] >0 ,即sum[x,i]>0 为我们要的目标时间段。这个x可能有很多，
        那最大的时间段是哪一个呢? 显然，应该是 sum[i] - sum[x] = 1 所得的x值。解释如下：
                在不停的累加过程中，如当前sum = -3，在后续一个又一个累加后，遇到了一个i使得sum = -2，那么从-3到-2的索引就是最长的时间段。 
        
       public static int longestWPI(int[] hours){
        int max = 0;
        int sum = 0;
        Map<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < hours.length; i++) {
            int temp = hours[i] > 8 ? 1:-1;
            sum += temp;
            if(sum > 0) max = i+1;
            else {
                if(!map.containsKey(sum)) map.put(sum,i);
                if(map.containsKey(sum-1)) max = Math.max(max,i-map.get(sum-1));
            }
        }
        return max;
     }
