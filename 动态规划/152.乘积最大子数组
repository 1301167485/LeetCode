1：题目描述：https://leetcode-cn.com/problems/maximum-product-subarray/

  给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。

  示例 1:

  输入: [2,3,-2,4]
  输出: 6
  解释: 子数组 [2,3] 有最大乘积 6。
  示例 2:

  输入: [-2,0,-1]
  输出: 0
  解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。

2.思路：
    题目看着跟最大子序和一样，第一次采用最大子序和的方法做报错了，发现是因为正负号的问题；当nums[i]为负数，nums[i+1]为正数，nums[i+2]为负数时，这三个数的和为正数，
  而按照最大子序和的方法，dp[i+1] = nums[i] 为一个正数，dp[i+2] = nums[i+2] 为一个负数；因此应当考虑正负号的问题。
    1）具体地讲，如果 a={5,6,−3,4,−3}，那么此时max对应的序列是 {5,30,−3,4,−3}，按照前面的算法我们可以得到答案为 3030，即前两个数的乘积，而实际上答案应该是全体数字的乘积。
       我们来想一想问题出在哪里呢？问题出在最后一个−3 所对应的f max的值既不是 −3，也不是 4 × −3，而是 5×30×(−3)×4×(−3)。
       所以我们得到了一个结论：当前位置的最优解未必是由前一个位置的最优解转移得到的。即我们要重新考虑转移方程！！
    2）考虑当前位置如果是一个负数的话，那么我们希望以它前一个位置结尾的某个段的积也是个负数，这样就可以负负得正，并且我们希望这个积尽可能「负得更多」，即尽可能小。
    如果当前位置是一个正数的话，我们更希望以它前一个位置结尾的某个段的积也是个正数，并且希望它尽可能地大。于是这里我们可以再维护一个 f min(i)，
    它表示以第 i 个元素结尾的乘积最小子数组的乘积，那么我们可以得到这样的动态规划转移方程：
            max[i] = Math.max(max[i-1]*nums[i],Math.max(min[i-1]*nums[i],nums[i]));
            min[i] = Math.min(min[i-1]*nums[i],Math.min(max[i-1]*nums[i],nums[i]));
    它代表第 ii 个元素结尾的乘积最大子数组的乘积 fmax(i)，可以考虑把 ai加入第i−1 个元素结尾的乘积最大或最小的子数组的乘积中，二者加上a i，三者取大，
    就是第 i 个元素结尾的乘积最大子数组的乘积。第 i 个元素结尾的乘积最小子数组的乘积 f min
  
  总结：要注意转移方程，选择合适的转移方程!
  
3.代码:
    public int maxProduct(int[] nums) {
        int result = nums[0];
        int len = nums.length;
        int max = nums[0];
        int min = nums[0];
        for(int i = 1; i < len; i++){
            int imax = max;
            int imin = min;
            max = Math.max(imax*nums[i],Math.max(imin*nums[i],nums[i]));
            min = Math.min(imin*nums[i],Math.min(imax*nums[i],nums[i]));
            result = Math.max(result,max);
        }
        return result;
    }
