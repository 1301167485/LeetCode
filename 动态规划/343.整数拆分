1.题目描述：https://leetcode-cn.com/problems/integer-break/
给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。

示例 1:

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。
说明: 你可以假设 n 不小于 2 且不大于 58。

2.思路1：动态规划
  1）dp[i]表示数字i的拆分后的最大乘积，初始dp[1] = 0
  2）当i > 2时，i第一步可以拆分为j和i-j，此时乘积为j*(i-j)
  3）如果继续对i-j拆分，则此时乘积为j*dp[i-j]
  4）当k固定是，dp[i]=max(j*(i−j),j*dp[i−j])
  5）k的取值范围为(1，i-1),即进行遍历，找到对于i的最大的dp[i]
  6）dp[i]= {max(j×(i−j),j×dp[i−j])} ，1≤j<i
  
  代码:
       public int integerBreak(int n) {
        int[] dp = new int[n + 1];
        dp[1] = 0;
        
        for(int i = 2; i <= n; i++){
            int temp = 0;
            for(int j = 1;j < i;j++){
                temp = Math.max((i-j)*j,Math.max(dp[i-j]*j,temp));
            }
            dp[i] = temp;
        }
        return dp[n];
    }
3.思路2：动态规划，对上述思路进行优化，减少不必要的比较
  1）上述思路中，需要对k从1到i-1一直遍历，
  2）首先可以想到，k=1不需要遍历，因为当拆分的k=1时，d[i] = 1 * dp[i-1] = dp[i-1]；
  3）其次可以想到，只需要遍历(2，i/2)，后半部分包含在前半部分中
  4）实际上只需要考虑k = 2和k=3两种情况，dp[i]=max(2×(i−2),2×dp[i−2],3×(i−3),3×dp[i−3])，
  
  代码：
        public int integerBreak(int n) {
        int[] dp = new int[n+1];
        dp[1] = 0;
        dp[2] = 1;
        for(int i = 3; i <= n; i++){
            dp[i] = Math.max((i-2)*2,Math.max((i-3)*3,Math.max(dp[i-2]*2,dp[i-3]*3)));
        }
        return dp[n];
    }


4.思路3：数学方法:
  直接照搬定理:
    1）若拆分的数量 a 确定， 则 各拆分数字相等时 ，乘积最大。
    2）将数字 n 尽可能以因子 3 等分时，乘积最大
  拆分规则：
    1）最优： 3 。把数字 n 可能拆为多个因子 3 ，余数可能为 0,1,2 三种情况。
    2）次优： 2 。若余数为 2 ；则保留，不再拆为 1+1 。
    3）最差： 1 。若余数为 1 ；则应把一份 3+1 替换为 2+2，因为 2×2>3×1。
  算法流程：
    1）当 n ≤ 3 时，按照规则应不拆分，但由于题目要求必须拆分，因此必须拆出一个因子 1 ，即返回 n - 1 。
    2）当 n > 3 时，求 n 除以 3 的 整数部分 a 和 余数部分 b （即 n = 3a + b ），并分为以下三种情况：
          当 b = 0 时，直接返回 3^a；
          当 b = 1 时，要将一个 1 + 3 转换为 2+2，因此返回 3^{a-1}×4；
          当 b = 2 时，返回 3^a ×2。
   
  代码：
   public int integerBreak(int n) {
          if(n <= 3) return n-1;
          int a = n/3;
          int b = n%3;
          if(b == 0) return (int)Math.pow(3,a);
          else if (b == 1) return (int)Math.pow(3,a-1)*4;
          else return (int)Math.pow(3,a)*2;     
      }
    
    

 
