1.题目描述：https://leetcode-cn.com/problems/add-two-numbers/  
  给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

  如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

  您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

  示例：

  输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
  输出：7 -> 0 -> 8
  原因：342 + 465 = 807

2.思路：思路太复杂了，见代码。后面看一下官方题解，重新整理思路
3.代码:
      public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int temp = 0;
        List<ListNode> list = new ArrayList<>();
        while(l1 != null && l2 != null){
            int sum = l1.val + l2.val + temp;
            temp = 0;
            if(sum > 9) temp = 1;
            ListNode p = new ListNode(sum % 10);
            list.add(p);
            l1 = l1.next;
            l2 = l2.next;
        }
        if(l2 == null && l1 == null && temp == 1  ) list.add(new ListNode(1));
        if(l2 != null){
            while(l2 != null){
                if(temp == 1){
                    int sum = l2.val + temp;
                    if(sum > 9){
                        l2.val = sum % 10;
                        temp = 1;
                    }
                    else{
                        l2.val = sum;
                        temp = 0;
                    } 
                }
                list.add(l2);
                l2 = l2.next;
            }
            if(temp == 1) list.add(new ListNode(1));
        }
        if(l1 != null){
            while(l1 != null){
                if(temp == 1){
                    int sum = l1.val + temp;
                    if(sum > 9){
                        l1.val = sum % 10;
                        temp = 1;
                    }
                    else{
                        l1.val = sum;
                        temp = 0;
                    } 
                }
                list.add(l1);
                l1 = l1.next;
            }
            if(temp == 1) list.add(new ListNode(1));
        }
        for(int j = 0; j < list.size(); j++){
            if(j == list.size()-1) list.get(j).next = null;
            else list.get(j).next = list.get(j+1);
        }
        return list.get(0);
    }
