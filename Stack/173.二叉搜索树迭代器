1.题目：实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。

  调用 next() 将返回二叉搜索树中的下一个最小的数。

  示例：
  BSTIterator iterator = new BSTIterator(root);
  iterator.next();    // 返回 3
  iterator.next();    // 返回 7
  iterator.hasNext(); // 返回 true
  iterator.next();    // 返回 9
  iterator.hasNext(); // 返回 true
  iterator.next();    // 返回 15
  iterator.hasNext(); // 返回 true
  iterator.next();    // 返回 20
  iterator.hasNext(); // 返回 false

  提示：
  next() 和 hasNext() 操作的时间复杂度是 O(1)，并使用 O(h) 内存，其中 h 是树的高度。
  你可以假设 next() 调用总是有效的，也就是说，当调用 next() 时，BST 中至少存在一个下一个最小的数。


2.思路：
  1）二叉树的中序遍历将二叉树从小到大遍历。
  2）中序遍历二叉树，遇到结点就加入list中
  3）利用index实现非空判断
  
3.代码：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class BSTIterator {
    private List<Integer>list;
    private int index;
    public BSTIterator(TreeNode root) {
        this.list = new ArrayList<>();
        this.index = -1;
        this.order(root);
    }
    
    /** @return the next smallest number */
    public int next() {
        return list.get(++index);
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return this.index+1 < this.list.size();

    }
    private void order(TreeNode treeNode){
        if (treeNode != null){
            order(treeNode.left);
            list.add(treeNode.val);
            order(treeNode.right);
        }
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
 
 
4.注意代码格式，public和private关键字的使用、类的定义，this的使用
