1.题目描述：https://leetcode-cn.com/problems/3sum/
  给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。

  注意：答案中不可以包含重复的三元组。
  示例：

  给定数组 nums = [-1, 0, 1, 2, -1, -4]，

  满足要求的三元组集合为：
  [
    [-1, 0, 1],
    [-1, -1, 2]
  ]

2.思路1：暴力求解（超时了没ace掉）
  思路2：双指针（来自高分答案）
    1）对数组进行排序
    2）遍历整个数组sum[i];
    3）为元素i的后续数组设置指针L和R，L为i+1，R为leng-1；
    4）在区间(L,R)之间寻找是否满足条件的三个数
    5）如果三个数之和大于0则R--，小于0则L++；
    6）如果当前nums[i] > 0，则说明后续不存在满足条件的元素，可以直接break
    7）如果nums[i] = nums[i-1]，即对i进行遍历时，包含了对i+1的遍历，可以直接continue；
    8）如果nums[L] == nums(L+1)，则L++；同理nums[R] == nums[R-1]，则R--；
    
 3.代码:
 public List<List<Integer>> threeSum(int[] nums) {
        int len = nums.length;
        List<List<Integer>> res = new ArrayList<>();
        if(len < 3) return res;
        Arrays.sort(nums);
        for(int i = 0; i < len-2 ; i++){
            if(nums[i] > 0) break;
            if(i>0 && nums[i] == nums[i-1])continue;
            int l = i+1;
            int r = len-1;
            while(l<r){
                int sum = nums[i] + nums[l] + nums[r];
                if(sum == 0){
                    res.add(Arrays.asList(nums[i],nums[l],nums[r]));
                    while(l < r && nums[l] == nums[l+1]) l++;
                    while(l < r && nums[r] == nums[r-1]) r--;
                    l++;
                    r--;
                }
                else if(sum > 0) r--;
                else if(sum < 0) l++;

            }
        }
        return res;
    }
