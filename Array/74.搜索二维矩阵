1.题目：
  编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

  每行中的整数从左到右按升序排列。
  每行的第一个整数大于前一行的最后一个整数。
  示例 1:

  输入:
  matrix = [
    [1,   3,  5,  7],
    [10, 11, 16, 20],
    [23, 30, 34, 50]
  ]
  target = 3
  输出: true
  示例 2:

  输入:
  matrix = [
    [1,   3,  5,  7],
    [10, 11, 16, 20],
    [23, 30, 34, 50]
  ]
  target = 13
  输出: false


2.思路：
  1）如果比矩阵中最后一个元素大则返回false
  2）依次跟每一行的最后一个元素比较，target>该元素，则去下一行；小于该元素，则从本行第一个遍历，找的到返回ture，否则返回false。
  
3.代码:(在处理个别特殊矩阵上花了不少时间，提交了13次才通过....离谱！下次复习看一下二分法)
  public boolean searchMatrix(int[][] matrix, int target) {
               int  i = 0;
        if(matrix == null) return false;
        int a = matrix.length;
        if(a ==0) return false;
        int b = matrix[0].length;
        if(b==0) return false;
        while (i < a){
            if(i+1 == a){
                if (target > matrix[i][b-1]) return false;
                else {
                    for (int i1 = 0; i1 < matrix[i].length; i1++) {
                        if(target == matrix[i][i1]) return true;
                    }
                    return false;
                }
            }
            else {
                if(target > matrix[i][b-1]) ;
                else {
                    for (int i1 = 0; i1 < matrix[i].length; i1++) {
                        if(target == matrix[i][i1]) return true;
                    }
                    return false;
                }
            }
            i++;
        }
        return false;
    }
